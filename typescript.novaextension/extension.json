{
  "identifier": "apexskier.typescript",
  "name": "TypeScript",
  "organization": "Cameron Little",
  "description": "Advanced TypeScript and JavaScript language support for Nova",
  "version": "2.6.0",
  "categories": [
    "completions",
    "formatters",
    "issues",
    "languages",
    "sidebars"
  ],
  "license": "MIT",
  "repository": "https://github.com/apexskier/nova-typescript",
  "bugs": "https://github.com/apexskier/nova-typescript/issues",

  "main": "main.dist.js",
  "min_runtime": "2.0",

  "activationEvents": [
    "onLanguage:typescript",
    "onLanguage:tsx",
    "onLanguage:javascript",
    "onLanguage:jsx",
    "onWorkspaceContains:tsconfig.json"
  ],

  "entitlements": {
    "process": true,
    "filesystem": "readwrite"
  },

  "config": [
    {
      "key": "apexskier.typescript.config.tslibPath",
      "title": "TypeScript Library",
      "description": "(optional) Path to a custom installed TypeScript library directory. See \"Using the workspace version of TypeScript\" in the README for details.",
      "link": "nova://extension/?id=apexskier.typescript",
      "type": "string"
    },
    {
      "key": "apexskier.typescript.config.organizeImportsOnSave",
      "title": "Organize imports on save",
      "description": "Run Organize Imports command on file save.",
      "type": "boolean",
      "default": false
    },
    {
      "key": "apexskier.typescript.config.formatDocumentOnSave",
      "title": "Format document on save",
      "description": "Run Format Document command on file save.",
      "type": "boolean",
      "default": false
    },
    {
      "key": "apexskier.typescript.config.isEnabledForJavascript",
      "title": "Enable on Javascript Files",
      "description": "Enable TypeScript editor functionality for javascript and jsx files.",
      "type": "boolean",
      "default": true
    },
    {
      "key": "apexskier.typescript.config.skipDestructiveOrganizeImports",
      "title": "Skip destructive organize imports changes",
      "type": "boolean",
      "default": false
    },
    {
      "title": "TypeScript server User Preferences",
      "description": "Advanced configuration passed to the underlying typescript server. These may not apply to older versions of TypeScript.",
      "type": "section",
      "children": [
        {
          "key": "apexskier.typescript.config.userPreferences.disableSuggestions",
          "title": "Disable suggestions",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.quotePreference",
          "title": "Quote preferences",
          "type": "enum",
          "values": [
            ["auto", "Automatic"],
            ["double", "Double (\")"],
            ["single", "Single (')"]
          ],
          "default": "auto"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeCompletionsForModuleExports",
          "title": "Include completions for module exports",
          "description": "If enabled, TypeScript will search through all external modules' exports and add them to the completions list. This affects lone identifier completions but not completions on the right hand side of `obj.`.",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeCompletionsForImportStatements",
          "title": "Include completions for import statements",
          "description": "Enables auto-import-style completions on partially-typed import statements. E.g., allows `import write|` to be completed to `import { writeFile } from \"fs\"`.",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeCompletionsWithSnippetText",
          "title": "Include completions with snippet text",
          "description": "Allows completions to be formatted with snippet text, indicated by `CompletionItem[\"isSnippet\"]`.",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeCompletionsWithInsertText",
          "title": "Include completions with insert text",
          "description": "If enabled, the completion list will include completions with invalid identifier names. For those entries, The `insertText` and `replacementSpan` properties will be set to change from `.x` property access to `[\"x\"]`.",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeAutomaticOptionalChainCompletions",
          "title": "Include automatic optional chain completions",
          "description": "Unless this option is `false`, or `includeCompletionsWithInsertText` is not enabled, member completion lists triggered with `.` will include entries on potentially-null and potentially-undefined values, with insertion text to replace preceding `.` tokens with `?.`.",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeCompletionsWithClassMemberSnippets",
          "title": "Include completions with class member snippets",
          "description": "If enabled, completions for class members (e.g. methods and properties) will include a whole declaration for the member. E.g., `class A { f| }` could be completed to `class A { foo(): number {} }`, instead of `class A { foo }`.",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeCompletionsWithObjectLiteralMethodSnippets",
          "title": "Include completions with class member snippets",
          "description": "If enabled, object literal methods will have a method declaration completion entry in addition to the regular completion entry containing just the method name. E.g., `const objectLiteral: T = { f| }` could be completed to `const objectLiteral: T = { foo(): void {} }`, in addition to `const objectLiteral: T = { foo }`.",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.useLabelDetailsInCompletionEntries",
          "title": "Use label details in completion entries",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.allowIncompleteCompletions",
          "title": "Allow incomplete completions",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.importModuleSpecifierPreference",
          "title": "Import module specifier",
          "description": "Preferred path ending for auto imports.",
          "type": "enum",
          "values": [
            ["shortest", "Shortest"],
            ["project-relative", "Project-relative"],
            ["relative", "Relative"],
            ["non-relative", "Non-relative"]
          ],
          "default": "shortest"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.importModuleSpecifierEnding",
          "title": "Import module specifier",
          "description": "Determines whether we import `foo/index.ts` as \"foo\", \"foo/index\", or \"foo/index.js\"",
          "type": "enum",
          "values": [
            ["auto", "Automatic"],
            ["minimal", "Minimal"],
            ["index", "Index"],
            ["js", ".js"]
          ],
          "default": "auto"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.allowTextChangesInNewFiles",
          "title": "Allow text changes in new files",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.lazyConfiguredProjectsFromExternalProject",
          "title": "Lazy configured projects from external project",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.providePrefixAndSuffixTextForRename",
          "title": "Provide prefix and suffix text for rename",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.provideRefactorNotApplicableReason",
          "title": "Provide refactor not applicable reason",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.allowRenameOfImportPath",
          "title": "Allow rename of import path",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includePackageJsonAutoImports",
          "title": "Allow rename of import path",
          "type": "enum",
          "values": [
            ["auto", "Automatic"],
            ["on", "On"],
            ["off", "Off"]
          ],
          "default": "auto"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.jsxAttributeCompletionStyle",
          "title": "jsx attribute completion style",
          "type": "enum",
          "values": [
            ["auto", "Automatic"],
            ["braces", "Braces"],
            ["none", "None"]
          ],
          "default": "auto"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.displayPartsForJSDoc",
          "title": "Display parts for JSDoc",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.generateReturnInDocTemplate",
          "title": "Generate return in documentation templates",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeInlayParameterNameHints",
          "title": "Include inlay parameter name hints",
          "type": "enum",
          "values": [
            ["none", "None"],
            ["literals", "Literals"],
            ["all", "All"]
          ],
          "default": "none"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeInlayParameterNameHintsWhenArgumentMatchesName",
          "title": "Include inlay parameter name hints when argument matches name",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeInlayFunctionParameterTypeHints",
          "title": "Include inlay function parameter type hints",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeInlayVariableTypeHints",
          "title": "Include inlay variable type hints",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeInlayVariableTypeHintsWhenTypeMatchesName",
          "title": "Include inlay variable type hints when type matches name",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeInlayPropertyDeclarationTypeHints",
          "title": "Include inlay property declaration type hints",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeInlayFunctionLikeReturnTypeHints",
          "title": "Include inlay function like return type hints",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeInlayEnumMemberValueHints",
          "title": "Include inlay enum member value hints",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.autoImportFileExcludePatterns",
          "title": "Auto import file exclude patterns",
          "type": "stringArray"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.disableLineTextInReferences",
          "title": "Disable line text in references",
          "description": "Indicates whether ReferenceResponseItem.lineText is supported.",
          "type": "boolean"
        }
      ]
    },
    {
      "title": "Debug",
      "description": "Settings intended for extension development",
      "type": "section",
      "children": [
        {
          "key": "apexskier.typescript.config.debug.disableDependencyManagement",
          "title": "Disable dependency management",
          "description": "Enable this to skip installing dependencies. Use this if you want to link a custom language server.",
          "type": "boolean",
          "default": false
        },
        {
          "key": "apexskier.typescript.config.debug.debugLanguageServer",
          "title": "Debug Language Server",
          "description": "Open a debug session for the language server.",
          "type": "boolean",
          "default": false
        },
        {
          "key": "apexskier.typescript.config.debug.debugLanguageServer.break",
          "title": "Debug Language Server (break on start)",
          "description": "If debugging, break when starting the language server.",
          "type": "boolean",
          "default": false
        },
        {
          "key": "apexskier.typescript.config.debug.debugLanguageServer.port",
          "title": "Debug Language Server (port)",
          "description": "Language server debug port.",
          "type": "number",
          "default": 9229
        }
      ]
    }
  ],

  "configWorkspace": [
    {
      "key": "apexskier.typescript.config.tslibPath",
      "title": "TypeScript Library",
      "description": "(optional) Path to a custom installed TypeScript library directory. See \"Using the workspace version of TypeScript\" in the README for details.",
      "link": "nova://extension/?id=apexskier.typescript",
      "type": "string"
    },
    {
      "key": "apexskier.typescript.config.organizeImportsOnSave",
      "title": "Organize imports on save",
      "description": "Run Organize Imports command on file save.",
      "type": "enum",
      "values": [
        ["null", "Inherit from Global Settings"],
        ["false", "Disable"],
        ["true", "Enable"]
      ],
      "default": "null"
    },
    {
      "key": "apexskier.typescript.config.formatDocumentOnSave",
      "title": "Format document on save",
      "description": "Run Format Document command on file save.",
      "type": "enum",
      "values": [
        ["null", "Inherit from Global Settings"],
        ["false", "Disable"],
        ["true", "Enable"]
      ],
      "default": "null"
    },
    {
      "key": "apexskier.typescript.config.isEnabledForJavascript",
      "title": "Enable on Javascript Files",
      "description": "Enable TypeScript editor functionality for javascript and jsx files.",
      "type": "enum",
      "values": ["Inherit from Global Settings", "Disable", "Enable"],
      "default": "Inherit from Global Settings"
    },
    {
      "key": "apexskier.typescript.config.skipDestructiveOrganizeImports",
      "title": "Skip destructive organize imports changes",
      "type": "enum",
      "values": ["Inherit from Global Settings", "False", "True"],
      "default": "Inherit from Global Settings"
    },
    {
      "title": "TypeScript server User Preferences",
      "description": "Advanced configuration passed to the underlying typescript server. These may not apply to older versions of TypeScript.",
      "type": "section",
      "children": [
        {
          "key": "apexskier.typescript.config.userPreferences.disableSuggestions",
          "title": "Disable suggestions",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.quotePreference",
          "title": "Quote preferences",
          "type": "enum",
          "values": [
            ["auto", "Automatic"],
            ["double", "Double (\")"],
            ["single", "Single (')"]
          ],
          "default": "auto"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeCompletionsForModuleExports",
          "title": "Include completions for module exports",
          "description": "If enabled, TypeScript will search through all external modules' exports and add them to the completions list. This affects lone identifier completions but not completions on the right hand side of `obj.`.",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeCompletionsForImportStatements",
          "title": "Include completions for import statements",
          "description": "Enables auto-import-style completions on partially-typed import statements. E.g., allows `import write|` to be completed to `import { writeFile } from \"fs\"`.",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeCompletionsWithSnippetText",
          "title": "Include completions with snippet text",
          "description": "Allows completions to be formatted with snippet text, indicated by `CompletionItem[\"isSnippet\"]`.",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeCompletionsWithInsertText",
          "title": "Include completions with insert text",
          "description": "If enabled, the completion list will include completions with invalid identifier names. For those entries, The `insertText` and `replacementSpan` properties will be set to change from `.x` property access to `[\"x\"]`.",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeAutomaticOptionalChainCompletions",
          "title": "Include automatic optional chain completions",
          "description": "Unless this option is `false`, or `includeCompletionsWithInsertText` is not enabled, member completion lists triggered with `.` will include entries on potentially-null and potentially-undefined values, with insertion text to replace preceding `.` tokens with `?.`.",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeCompletionsWithObjectLiteralMethodSnippets",
          "title": "Include completions with class member snippets",
          "description": "If enabled, object literal methods will have a method declaration completion entry in addition to the regular completion entry containing just the method name. E.g., `const objectLiteral: T = { f| }` could be completed to `const objectLiteral: T = { foo(): void {} }`, in addition to `const objectLiteral: T = { foo }`.",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.useLabelDetailsInCompletionEntries",
          "title": "Use label details in completion entries",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.allowIncompleteCompletions",
          "title": "Allow incomplete completions",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.importModuleSpecifierPreference",
          "title": "Import module specifier",
          "description": "Preferred path ending for auto imports.",
          "type": "enum",
          "values": [
            ["shortest", "Shortest"],
            ["project-relative", "Project-relative"],
            ["relative", "Relative"],
            ["non-relative", "Non-relative"]
          ],
          "default": "shortest"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.importModuleSpecifierEnding",
          "title": "Import module specifier",
          "description": "Determines whether we import `foo/index.ts` as \"foo\", \"foo/index\", or \"foo/index.js\"",
          "type": "enum",
          "values": [
            ["auto", "Automatic"],
            ["minimal", "Minimal"],
            ["index", "Index"],
            ["js", ".js"]
          ],
          "default": "auto"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.allowTextChangesInNewFiles",
          "title": "Allow text changes in new files",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.lazyConfiguredProjectsFromExternalProject",
          "title": "Lazy configured projects from external project",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.providePrefixAndSuffixTextForRename",
          "title": "Provide prefix and suffix text for rename",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.provideRefactorNotApplicableReason",
          "title": "Provide refactor not applicable reason",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.allowRenameOfImportPath",
          "title": "Allow rename of import path",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includePackageJsonAutoImports",
          "title": "Allow rename of import path",
          "type": "enum",
          "values": [
            ["auto", "Automatic"],
            ["on", "On"],
            ["off", "Off"]
          ],
          "default": "auto"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.jsxAttributeCompletionStyle",
          "title": "jsx attribute completion style",
          "type": "enum",
          "values": [
            ["auto", "Automatic"],
            ["braces", "Braces"],
            ["none", "None"]
          ],
          "default": "auto"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.displayPartsForJSDoc",
          "title": "Display parts for JSDoc",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.generateReturnInDocTemplate",
          "title": "Generate return in documentation templates",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeInlayParameterNameHints",
          "title": "Include inlay parameter name hints",
          "type": "enum",
          "values": [
            ["none", "None"],
            ["literals", "Literals"],
            ["all", "All"]
          ],
          "default": "none"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeInlayParameterNameHintsWhenArgumentMatchesName",
          "title": "Include inlay parameter name hints when argument matches name",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeInlayFunctionParameterTypeHints",
          "title": "Include inlay function parameter type hints",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeInlayVariableTypeHints",
          "title": "Include inlay variable type hints",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeInlayVariableTypeHintsWhenTypeMatchesName",
          "title": "Include inlay variable type hints when type matches name",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeInlayPropertyDeclarationTypeHints",
          "title": "Include inlay property declaration type hints",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeInlayFunctionLikeReturnTypeHints",
          "title": "Include inlay function like return type hints",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.includeInlayEnumMemberValueHints",
          "title": "Include inlay enum member value hints",
          "type": "boolean"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.autoImportFileExcludePatterns",
          "title": "Auto import file exclude patterns",
          "type": "stringArray"
        },
        {
          "key": "apexskier.typescript.config.userPreferences.disableLineTextInReferences",
          "title": "Disable line text in references",
          "description": "Indicates whether ReferenceResponseItem.lineText is supported.",
          "type": "boolean"
        }
      ]
    }
  ],

  "sidebars": [
    {
      "id": "apexskier.typescript.sidebar",
      "name": "TS/JS",
      "smallImage": "SidebarSmall",
      "largeImage": "SidebarLarge",
      "sections": [
        {
          "id": "apexskier.typescript.sidebar.info",
          "name": "Information",
          "placeholderText": "TypeScript Extension Information",
          "headerCommands": [
            {
              "title": "Refresh",
              "image": "__builtin.refresh",
              "command": "apexskier.typescript.reload"
            }
          ]
        },
        {
          "id": "apexskier.typescript.sidebar.symbols",
          "name": "Results",
          "placeholderText": "Results from “Find Symbol”, “Find Reference” and “Go to Definition” will show here.",
          "headerCommands": [
            {
              "title": "Find Symbol",
              "image": "Search",
              "tooltip": "Open the Find Symbol palette",
              "command": "apexskier.typescript.findSymbol"
            }
          ]
        }
      ]
    }
  ],

  "commands": {
    "extensions": [
      {
        "title": "Preferences",
        "command": "apexskier.typescript.openWorkspaceConfig"
      },
      {
        "title": "Restart Server",
        "command": "apexskier.typescript.reload"
      },
      {
        "title": "Find Symbol",
        "command": "apexskier.typescript.findSymbol"
      },
      {
        "title": "Force Unlock Dependency Installation",
        "command": "apexskier.typescript.forceClearLock"
      }
    ],
    "editor": [
      {
        "title": "Find References",
        "command": "apexskier.typescript.findReferences",
        "filters": {
          "syntaxes": ["typescript", "tsx", "javascript", "jsx", "cts", "mts"]
        }
      },
      {
        "title": "Rename Symbol",
        "command": "apexskier.typescript.rename",
        "filters": {
          "syntaxes": ["typescript", "tsx", "javascript", "jsx", "cts", "mts"]
        }
      },
      {
        "title": "Organize Imports",
        "command": "apexskier.typescript.commands.organizeImports",
        "filters": {
          "syntaxes": ["typescript", "tsx", "javascript", "jsx", "cts", "mts"]
        }
      },
      {
        "title": "Format Document",
        "command": "apexskier.typescript.commands.formatDocument",
        "filters": {
          "syntaxes": ["typescript", "tsx", "javascript", "jsx", "cts", "mts"]
        }
      },
      {
        "title": "Show Documentation (experimental)",
        "command": "apexskier.typescript.signatureHelp",
        "filters": {
          "syntaxes": ["typescript", "tsx", "javascript", "jsx", "cts", "mts"]
        }
      }
    ]
  }
}
